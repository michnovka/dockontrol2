{% extends 'cp/admin_base.html.twig' %}

{% block title %}Users | Access Management{% endblock %}
{% set active = 'users' %}
{% set breadcrumbs = [
    {
         'title': 'Access Management', 'link': path('cp_access_management')
    },
    {
        'title': 'Users'
    }
] %}
{% set actions = [
    {
        'link': path('cp_access_management_user_new'),
        'title': 'Create New User',
    }
] %}
{% block content %}
    {% include 'cp/access_management/user/filter.html.twig' %}
    <div class="card mt-3 mb-2">
    <div class="table-responsive rounded">
        <table class="table table-striped table-sm">
            <thead>
            <tr>
                <th>{{ knp_pagination_sortable(users, 'Id', 'u.id') }}</th>
                <th>{{ knp_pagination_sortable(users, 'Name', 'u.name') }}</th>
                <th>E-mail</th>
                <th>Phone</th>
                <th>Enabled</th>
                <th>{{ knp_pagination_sortable(users, 'Apartment', 'a.name') }}</th>
                <th>{{ knp_pagination_sortable(users, 'Role', 'u.role') }}</th>
                <th>{{ knp_pagination_sortable(users, 'Landlord', 'l.id') }}</th>
                <th>Groups</th>
                <th>{{ knp_pagination_sortable(users, 'Time Created', 'u.createdTime') }}</th>
                <th>{{ knp_pagination_sortable(users, 'Last Command Time', 'u.timeLastAction') }}</th>
                <th class="text-end">Action</th>
            </tr>
            </thead>
            <tbody class="table-group-divider">
            {% set userRole = enum("\\App\\Entity\\Enum\\UserRole") %}
                {% for user in users %}
                    {% include 'cp/access_management/user/row.html.twig' %}
                {% else %}
                    <tr>
                        <td colspan="13">No records found.</td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {{ include('paginator/pagination_card_footer.html.twig', {'knp_result_set': users}) }}
    </div>
    <div class="modal fade" id="delete_user_modal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <form action="" method="post" id="delete_user_form">
                    <div class="modal-header bg-danger">
                        <h6 class="card-title text-white">
                            Delete User
                        </h6>
                        <button aria-label="Close" class="btn-close btn-close-white" data-bs-dismiss="modal">
                            <span aria-hidden="true"></span>
                        </button>
                    </div>

                    <div class="modal-body">
                        <p>The following user is about to be deleted:</p>
                        <strong>
                            <ul>
                                <li id="delete_user_email"></li>
                            </ul>
                        </strong>
                        <p>Are you sure you want to proceed?</p>
                        <hr>
                        <h6 class="font-weight-semibold">Please enter the e-mail of the user, which you want to delete.</h6>
                        <input type="email" class="confirm-email form-control" id="confirm-email"/>
                        <span class="validation-invalid-label incorrect_code d-none">You entered the incorrect e-mail address.</span>
                        <span class="validation-invalid-label generic_error d-none">Something went wrong.</span>
                        <input type="hidden" class="_csrf_token_user" name="_csrf_token_user" id="_csrf_token_user" value="{{ csrf_token("usercsrf") }}">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-link" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn bg-danger approve-the-deletion-for-group text-white">Approve the Deletion</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let deleteBtns = document.querySelectorAll('.delete-user-btn');
            let deleteForm = document.getElementById('delete_user_form');
            let deleteModal = new bootstrap.Modal(document.getElementById('delete_user_modal'), {});

            deleteBtns.forEach((el) => {
                el.addEventListener('click', function (e) {
                    e.preventDefault();
                    let email = this.getAttribute('data-email');
                    let userId = this.getAttribute('data-user-id');
                    document.getElementById('delete_user_email').innerText = email;
                    document.getElementById('confirm-email').value = null;
                    deleteModal.show();

                    deleteForm.addEventListener('submit', function (e) {
                        e.preventDefault();
                        let confirmEmail = document.getElementById('confirm-email').value;
                        if (confirmEmail !== email) {
                            document.querySelector('.validation-invalid-label.incorrect_code').classList.remove('d-none');
                            setTimeout(function() {
                                document.querySelector('.validation-invalid-label.incorrect_code').classList.add('d-none')
                            }, 2500);
                        } else {
                            let deleteURL = '{{ path('cp_access_management_user_delete', {'id': '__ID__'}) }}';
                            deleteURL = deleteURL.replace('__ID__', userId);
                            let _csrf = document.getElementById('_csrf_token_user').value;
                            let formData = new FormData();
                            formData.append('_csrf', _csrf);
                            fetch(deleteURL, {
                                method: 'POST',
                                body: formData
                            }).then((res) => {
                                return res.json();
                            }).then((response) => {
                                if (response.status) {
                                    deleteModal.hide();
                                    window.location.reload();
                                } else {
                                    document.querySelector('.generic_error').innerHTML = response.errorMessage;
                                    document.querySelector('.generic_error').classList.remove('d-none');
                                    setTimeout(function() {
                                        document.querySelector('.generic_error').classList.add('d-none');
                                    }, 2500)
                                }
                            })
                        }
                    });
                });
            });
        });
    </script>
{% endblock %}
