<div class="card mt-2">
    <div class="card-header p-2">
        <div class="d-flex justify-content-between align-items-center">
            <p class="card-title mb-0">Car Enter Details</p>
            <a href="#" class="btn btn-sm btn-primary" id="add-car-enter-details-btn">Create New Action</a>
        </div>
    </div>
    <div class="card-body p-0">

        <div class="table-responsive rounded">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th></th>
                    <th>Action Name</th>
                    <th>Order</th>
                    <th>Wait Seconds After Enter</th>
                    <th>Wait Seconds After Exit</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody id="sortable" >
                {% for carEnterDetail in carEnterDetails %}
                    <tr data-id="{{ carEnterDetail.id }}" data-order="{{ carEnterDetail.order }}" {%  if carEnterDetail.user %} data-car-details-user="{{ carEnterDetail.user.id }}" {% else %} data-car-details-building="{{ carEnterDetail.building.id }}" {% endif %}>
                        <td><i class="bi bi-arrows-move handle hand-cursor"></i></td>
                        <td>{{ carEnterDetail.action.name }}</td>
                        <td id="order_{{ carEnterDetail.id }}">{{ carEnterDetail.order }}</td>
                        <td>{{ carEnterDetail.waitSecondsAfterEnter }}</td>
                        <td>{{ carEnterDetail.waitSecondsAfterExit }}</td>
                        <td>
                            <a href="javascript:void(0)" class="text-decoration-none fs-6 text-danger delete-car-enter-details-btn" data-car-details-action="{{ carEnterDetail.action.name }}" {%  if carEnterDetail.user %} data-car-details-user="{{ carEnterDetail.user.id }}" {% else %} data-car-details-building="{{ carEnterDetail.building.id }}" {% endif %} data-car-details-id="{{ carEnterDetail.id }}" data-bs-toggle="tooltip" data-bs-original-title="Delete">
                                <i class="bi bi-trash"></i>
                            </a>
                        </td>
                    </tr>
                    {% else %}
                    <tr>
                        <td colspan="6">No car enter details found.</td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
            <input type="hidden" id="car_enter_details_csrf" name="car_enter_details_csrf" value="{{ csrfToken }}">
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let addCarEnterDetailsBtn = document.getElementById('add-car-enter-details-btn');
        let addCarEnterDetailsModal = new bootstrap.Modal(document.getElementById('add_car_enter_details_modal'), {});
        let addCarEnterDetailsForm = document.getElementById('add_car_enter_details_form');

        let removeCarEnterDetailBtns = document.querySelectorAll('.delete-car-enter-details-btn');
        let removeCarEnterDetailsModal = new bootstrap.Modal(document.getElementById('delete_car_enter_details_modal'), {});
        let removeCarEnterDetailsForm = document.getElementById('delete_car_enter_details_form');

        addCarEnterDetailsBtn.addEventListener('click', (e) => {
            e.preventDefault();
            addCarEnterDetailsModal.show();
            addCarEnterDetailsForm.addEventListener('submit', (e) => {
                e.preventDefault();
                let selectedAction = document.getElementById('car_enter_details_action').value;
                let waitSecondsAfterEnter = document.getElementById('car_enter_details_wait_seconds_after_enter').value;
                let waitSecondsAfterExit = document.getElementById('car_enter_details_wait_seconds_before_exit').value;
                let csrfToken = document.getElementById('_csrf_token_car_enter_details_add').value;

                let formData = new FormData();
                formData.append('_csrf', csrfToken);
                formData.append('action', selectedAction);
                formData.append('wait_seconds_after_enter', waitSecondsAfterEnter);
                formData.append('wait_seconds_after_exit', waitSecondsAfterExit);
                let saveCarEnterDetailURL ="{{ saveCarEnterDetailURL }}";
                saveCarEnterDetailURL = saveCarEnterDetailURL.replace('__ACTION__', selectedAction);

                fetch(saveCarEnterDetailURL, {
                    method: 'POST',
                    body: formData
                }).then((response) => {
                    return response.json();
                }).then(() => {
                    window.location.reload();
                });
            });
        });

        const validateInputAndToggleButton = (inputId) => {
            document.getElementById(inputId).addEventListener('keyup', (e) => {
                e.preventDefault();
                let value = parseInt(e.target.value);
                const button = document.querySelector('.save-car-details-for-building');
                if (value < 0 || isNaN(value)) {
                    button.setAttribute('disabled', 'disabled');
                } else {
                    button.removeAttribute('disabled');
                }
            });
        };

        validateInputAndToggleButton('car_enter_details_wait_seconds_after_enter');
        validateInputAndToggleButton('car_enter_details_wait_seconds_before_exit');


        removeCarEnterDetailBtns.forEach((btn) => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                let carEnterDetailID = btn.getAttribute('data-car-details-id');
                let carEnterDetailUser = btn.hasAttribute('data-car-details-user') ? btn.getAttribute('data-car-details-user') : null;
                let carEnterDetailBuilding = btn.hasAttribute('data-car-details-building') ? btn.getAttribute('data-car-details-building') : null;

                document.getElementById('delete_car_enter_details_action_name').innerHTML = btn.getAttribute('data-car-details-action');
                removeCarEnterDetailsModal.show();

                removeCarEnterDetailsForm.addEventListener('submit', (e) => {
                    e.preventDefault();

                    let deleteCarEnterDetailURL = "{{ path('cp_settings_change_car_details_remove', {'id': '__ID__'}) }}";
                    deleteCarEnterDetailURL = deleteCarEnterDetailURL.replace('__ID__', carEnterDetailID);

                    let csrfToken = document.getElementById('_csrf_token_car_enter_details_action').value;

                    let formData = new FormData();
                    formData.append('_csrf', csrfToken);

                    if (carEnterDetailUser) {
                        formData.append('user', carEnterDetailUser);
                    } else if (carEnterDetailBuilding) {
                        formData.append('building', carEnterDetailBuilding);
                    }

                    fetch(deleteCarEnterDetailURL, {
                        method: 'POST',
                        body: formData
                    }).then((res) => {
                        return res.json();
                    }).then((response) => {
                        if (response.status) {
                            btn.closest('tr').remove();
                            removeCarEnterDetailsModal.hide();
                            let orders = getUpdatedOrders();
                            let formData = new FormData();
                            formData.append('_csrf', csrfToken);
                            formData.append('orders', JSON.stringify(orders));
                            updateOrders(formData);
                            window.location.reload();
                        } else {
                            document.querySelector('.generic_error').innerHTML = response.errorMessage;
                            document.querySelector('.generic_error').classList.remove('d-none');
                            setTimeout(function() {
                                document.querySelector('.generic_error').classList.add('d-none');
                            }, 2500);
                        }
                    });
                });
            });
        });

        new Sortable(document.getElementById('sortable'), {
            handle: '.handle',
            animation: 150,
            onEnd: function () {
                let orders = getUpdatedOrders();
                let csrfToken = document.getElementById('car_enter_details_csrf').value;
                let formData = new FormData();
                let firstRow = document.querySelector('#sortable tr');
                let carEnterDetailUser = firstRow.hasAttribute('data-car-details-user') ? firstRow.getAttribute('data-car-details-user') : null;
                let carEnterDetailBuilding = firstRow.hasAttribute('data-car-details-building') ? firstRow.getAttribute('data-car-details-building') : null;

                formData.append('_csrf', csrfToken);
                formData.append('orders', orders);
                if (carEnterDetailUser) {
                    formData.append('user', carEnterDetailUser);
                } else if (carEnterDetailBuilding) {
                    formData.append('building', carEnterDetailBuilding);
                }
                updateOrders(formData);
            }
        });

        function getUpdatedOrders() {
            let orders = [];
            document.querySelectorAll('#sortable tr').forEach(function (row, index) {
                document.getElementById("order_" + row.getAttribute('data-id')).innerHTML = index + 1;
                orders.push({
                    id: parseInt(row.getAttribute('data-id')),
                    order: parseInt(row.getAttribute('data-order')),
                    new_order: index + 1,
                });
            });

            return JSON.stringify(orders);
        }

        function updateOrders(formData) {
            let changeOrderURL = "{{ path('cp_settings_change_car_details_change_order') }}";
            fetch(changeOrderURL, {
                method: 'POST',
                body: formData,
            }). then((response) => {
                return response.json();
            }) .then ((res) => {
                console.log(res)
            });
        }
        allowAddNewAction();
        function allowAddNewAction()
        {
            let currentTotalCarEnterDetails = document.getElementById("sortable").querySelectorAll('tr').length;

            if (currentTotalCarEnterDetails >= 5) {
                document.getElementById('add-car-enter-details-btn').setAttribute('disabled', 'disabled');
                document.getElementById('add-car-enter-details-btn').classList.add('disabled');
            }
        }
    });
</script>
